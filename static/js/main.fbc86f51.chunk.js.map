{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","newText","toUpperCase","toLowerCase","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","join","capitalizeText","map","t","charAt","slice","length","defaultProps","about","Alert","alert","role","msg","App","setMode","setAlert","showAlert","message","setTimeout","body","style","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oMAGe,SAASA,EAAOC,GAC7B,OACE,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACE,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SACGH,EAAMI,QAET,wBACEH,UAAU,iBACVI,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAPb,SASE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,oBAAIL,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,sBAOJ,qBAAKF,UAAS,iCAAyC,UAAbD,EAAME,KAAe,OAAO,WAC9E,uBAAOD,UAAU,mBAAmBM,QAASP,EAAMQ,WAAYH,KAAK,WAAWC,GAAG,2BAClF,uBAAOL,UAAU,mBAAmBQ,QAAQ,yBAAyB,UAArE,8BC/Ba,SAASC,EAASV,GAC7B,IAkDA,EAAwBW,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,OACI,qCACJ,sBAAKZ,UAAU,YAAf,UACI,+BAAKD,EAAMc,QAAX,QACF,qBAAKb,UAAU,OAAf,SAEE,0BACEA,UAAU,eACVK,GAAG,SACHS,MAAOH,EACPI,SA9CgB,SAACC,GAEnBJ,EAAQI,EAAMC,OAAOH,QA6CnBI,KAAK,QAGT,wBAAQlB,UAAU,uBAAuBM,QAlEtB,WAEjB,IAAIa,EAAQR,EAAKS,cACjBR,EAAQO,IA+DV,kCACA,wBAAQnB,UAAU,uBAAuBM,QA3DrB,WAElB,IAAIa,EAAQR,EAAKU,cACjBT,EAAQO,IAwDV,kCACA,wBAAQnB,UAAU,uBAAuBM,QAhC1B,WACb,IAAIK,EAAOW,SAASC,eAAe,UACnCZ,EAAKa,SACLb,EAAKc,kBAAkB,EAAE,MACzBC,UAAUC,UAAUC,UAAUjB,EAAKG,QA4BrC,kBACA,wBAAQd,UAAU,uBAAuBM,QAxBzB,WACdM,EAAQ,KAuBV,mBACA,wBAAQZ,UAAU,uBAAuBM,QAzChB,WACvB,IAAIa,EAAQR,EAAKkB,MAAM,QACvBjB,EAAQO,EAAQW,KAAK,OAuCvB,0BACA,wBAAQ9B,UAAU,uBAAuBM,QAjDvB,WAClB,IAAIyB,EAAiBpB,EAAKkB,MAAM,KAAKG,KAAI,SAAAC,GAAC,OAAIA,EAAEC,OAAO,GAAGd,cAAgBa,EAAEE,MAAM,GAAGd,iBAAeS,KAAK,KACzGlB,EAAQmB,IA+CR,6BAIF,sBAAK/B,UAAU,iBAAf,UACI,mDACA,8BAAIW,EAAKkB,MAAM,KAAKO,OAApB,cAAuCzB,EAAKyB,OAA5C,kBACA,8BAAI,KAAQzB,EAAKkB,MAAM,KAAKO,OAA5B,oBACA,yCACA,4BAAIzB,UDjCZb,EAAOuC,aAAe,CAClBlC,MAAO,iBACPmC,MAAM,mBExCKC,MAVf,SAAexC,GAEX,OACEA,EAAMyC,OAAU,sBAAKxC,UAAS,sBAAiBD,EAAMyC,MAAMpC,KAA7B,gCAAiEqC,KAAK,QAApF,UAChB,iCAAS1C,EAAMyC,MAAME,MADL,IACoB3C,EAAMyC,MAAME,IAC9C,wBAAQtC,KAAK,SAASJ,UAAU,YAAY,kBAAgB,QAAQ,aAAW,cC+CxE2C,MA5Cf,WACC,MAAwBjC,mBAAS,SAAjC,mBAAOT,EAAP,KAAa2C,EAAb,KACA,EAA0BlC,mBAAS,MAAnC,mBAAO8B,EAAP,KAAcK,EAAd,KAEMC,EAAU,SAACC,EAAS3C,GACxByC,EAAS,CACVH,IAAIK,EACH3C,KAAKA,IAIR4C,YAAW,WACTH,EAAS,QACT,MAcA,OAEA,cADA,CACA,sBAEF,cAAC/C,EAAD,CAAQK,MAAM,YAAaF,KAAMA,EAAMM,WAhBrB,WACJ,UAARN,GACE2C,EAAQ,QACVtB,SAAS2B,KAAKC,MAAMC,gBAAgB,UACtCL,EAAU,6BAA6B,aAGtCF,EAAQ,SACRtB,SAAS2B,KAAKC,MAAMC,gBAAgB,QACpCL,EAAU,8BAA8B,eAQ7C,sBAAK9C,UAAU,YAAf,UACE,cAAC,EAAD,CAAOwC,MAAOA,IAChB,cAAC/B,EAAD,CAAUI,QAAQ,0BChCHuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzC,SAASC,eAAe,SAM1B6B,K","file":"static/js/main.fbc86f51.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            \r\n          </ul>\r\n\r\n          <div className={`Form-check form-switch ${props.mode==='light'?'dark':'light'}`}/>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" MY-3>DarkMode</label>\r\n</div>\r\n         \r\n\r\n\r\n        </div>\r\n    </nav>\r\n  \r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n\r\n  about: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set Title Here\",\r\n    about:\"About text here\"\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick =()=>{\r\n        //console.log(\"Uppercase was Clicked\" + text)\r\n        let newText=text.toUpperCase();\r\n        setText(newText)\r\n      \r\n        \r\n    }\r\n \r\n    const handleLowClick =()=>{\r\n        //console.log(\"Uppercase was Clicked\" + text)\r\n        let newText=text.toLowerCase();\r\n        setText(newText)\r\n        \r\n        \r\n    }\r\n\r\n    const handleOnChange =(event)=>{\r\n        //console.log(\"Onchange\")\r\n        setText(event.target.value)\r\n\r\n    }\r\n\r\n    const captialText = ()=>{\r\n      let capitalizeText = text.split(' ').map(t => t.charAt(0).toUpperCase() + t.slice(1).toLowerCase()).join(\" \");\r\n      setText(capitalizeText)\r\n\r\n  }\r\n     \r\n\r\n      const  handleExtraspace =()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n    }\r\n\r\n\r\n\r\n    const handleCopy=()=>{\r\n        var text = document.getElementById(\"myText\")\r\n        text.select()\r\n        text.setSelectionRange(0,9999);\r\n        navigator.clipboard.writeText(text.value)\r\n        \r\n    }\r\n\r\n  \r\n    const resetText = () => {\r\n        setText(\"\");\r\n        \r\n      };\r\n\r\n    const [text, setText] = useState('');\r\n    \r\n    return (\r\n        <>\r\n    <div className=\"container\">\r\n        <h1>{props.heading}  </h1>\r\n      <div className=\"mb-3\">\r\n        \r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"myText\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n          rows=\"8\">\r\n          </textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-3\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n      <button className=\"btn btn-primary mx-3\" onClick={handleLowClick}>Convert To Lowercase</button>\r\n      <button className=\"btn btn-primary mx-3\" onClick={handleCopy}>Copy</button>\r\n      <button className=\"btn btn-primary mx-3\" onClick={resetText}>Reset</button>\r\n      <button className=\"btn btn-primary mx-3\" onClick={handleExtraspace}>Remove Space</button>\r\n      <button className=\"btn btn-primary mx-3\" onClick={captialText}>Captial Text</button>\r\n     \r\n     \r\n    </div>\r\n    <div className=\"container my-2\" >\r\n        <h2>Your Text Summary</h2>\r\n        <p>{text.split(\" \").length} words and {text.length} characters </p>\r\n        <p>{0.008 * text.split(\" \").length } Miuntes read </p>\r\n        <h2>Preview</h2>\r\n        <p>{text}</p>\r\n    </div>\r\n</>\r\n\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    \r\n    return (\r\n      props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      <strong>{props.alert.msg}</strong>:{props.alert.msg}\r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from 'react'\nimport Alert from \"./components/Alert\";\n\n\n\n//funtion name it is use to created component \n    //it is created using JSX\nfunction App() {\n const [mode, setMode] = useState('light')\n const [alert, setAlert] = useState(null)\n\n const showAlert=(message, type)=>{\n   setAlert({\n  msg:message,\n   type:type\n})\n\n\nsetTimeout(()=>{\n  setAlert(null)\n},3000);\n }\n const toggleMode=()=>{\n   if(mode ==='light'){\n        setMode('dark')\n      document.body.style.backgroundColor=\"#44475a\";\n    showAlert(\"dark mode has been enabled\",\"success\")\n    }\n   else{\n     setMode('light')\n     document.body.style.backgroundColor=\"white\";\n     showAlert(\"light mode has been enabled\",\"success\")\n   }\n }\n  return (\n  /*Fragmenation used to embed multiple tag inside single fragmented elemants*/ \n  <>           \n     \n<Navbar title=\"TextUtils\"  mode={mode} toggleMode={toggleMode}/>\n<div className=\"container\">\n  <Alert alert={alert}/> \n<TextForm heading=\"Enter The text\" />\n</div>\n\n\n{/* end of fragmentation */  }\n  \n</>              \n  );\n}\n\nexport default App;\n\n/*Note \n\n1. Always end the tag with closing tag \n\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}